from aiogram.utils.markdown import link

from src.core.ModelGateway.ai_http_client import HTTPMethods
from src.schemes.enums import AuthMethod, Languages, Menu


class TextBuilder:
    """
    Class for building text messages for bot
    with different languages, using MarkdownV2.
     """

    def __init__(self, language: Languages) -> None:
        if not isinstance(language, Languages):
            raise TypeError("Language must be an instance of Languages Enum.")
        self._language = language

    @staticmethod
    def start_handler() -> str:
        return "üåê:"

    def main_menu_greeting(self) -> str:
        if self._language == Languages.en:
            return "You are in the *main menu*\\. Here's what you can do\\:"
        if self._language == Languages.ru:
            return "–í—ã –≤ *–≥–ª–∞–≤–Ω–æ–º –º–µ–Ω—é*\\. –í–æ—Ç —á—Ç–æ –≤—ã –º–æ–∂–µ—Ç–µ —Å–¥–µ–ª–∞—Ç—å\\:"
        raise ValueError(f"Invalid language: {self._language.value}")

    def main( # noqa: PLR0911
            self,
            item: Menu,
    ) -> str:
        if not isinstance(item, Menu):
            raise TypeError("Item must be an instance of Menu Enum.")

        if self._language == Languages.en:
            if item == Menu.info:
                return (
                    "Information about bot\\:\n\n"
                    f"Source code: {link('github.com/mrzkv/LLMtgbot', 'https://github.com/mrzkv/LLMtgbot')}\n"
                    f"Creator: {link('tg.mrzkv.ru', 'https://tg.mrzkv.ru')}\n\n"
                )
            if item == Menu.models:
                return "You are in the *Models menu* üß†"
            if item == Menu.settings:
                return "You are in the *Bot settings* ‚öôÔ∏è"
            return "Unknown menu item. Please select an option from the menu below."

        if self._language == Languages.ru:
            if item == Menu.info:
                return (
                    "–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –±–æ—Ç–µ\\:\n\n"
                    f"–ò—Å—Ö–æ–¥–Ω—ã–π –∫–æ–¥: {link('github.com/mrzkv/LLMtgbot', 'https://github.com/mrzkv/LLMtgbot')}\n"
                    f"–°–æ–∑–¥–∞—Ç–µ–ª—å: {link('tg.mrzkv.ru', 'https://tg.mrzkv.ru')}\n\n"
                )
            if item == Menu.models:
                return "–í—ã –≤ *–º–µ–Ω—é –º–æ–¥–µ–ª–µ–π* üß†"
            if item == Menu.settings:
                return "–í—ã –≤ *–Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö –±–æ—Ç–∞* ‚öôÔ∏è"
            return "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –ø—É–Ω–∫—Ç –º–µ–Ω—é\\. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –æ–ø—Ü–∏—é –∏–∑ –º–µ–Ω—é –Ω–∏–∂–µ\\."

        raise ValueError(f"Invalid language: {self._language.value}")

    def add_ai_url(self) -> str:
        if self._language == Languages.en:
            return "Please enter the AI URL \\(up to its endpoint\\)\\.\nExample: `https://example.com/ai/v5/chat/`"
        if self._language == Languages.ru:
            return "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ AI \\(–¥–æ –µ—ë —ç–Ω–¥–ø–æ–∏–Ω—Ç–∞\\)\\.\n–ü—Ä–∏–º–µ—Ä: `https://example.com/ai/v5/chat/`"
        raise ValueError(f"Invalid language: {self._language.value}")

    def choose_http_method_prompt(self) -> str:
        """Returns the prompt to choose an HTTP method (GET, POST, PUT, PATCH, DELETE)."""
        if self._language == Languages.en:
            return "Now, please choose the *HTTP method* to use for this AI\\."
        if self._language == Languages.ru:
            return "–¢–µ–ø–µ—Ä—å, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ *HTTP\\-–º–µ—Ç–æ–¥* –¥–ª—è —ç—Ç–æ–≥–æ AI\\."
        raise ValueError(f"Invalid language: {self._language.value}")

    def choose_auth_method_prompt(self) -> str:
        """Returns the prompt to choose an authentication method (None, Cookies, Headers)."""
        if self._language == Languages.en:
            return "Next, choose the *authentication method*\\."
        if self._language == Languages.ru:
            return "–î–∞–ª–µ–µ, –≤—ã–±–µ—Ä–∏—Ç–µ *–º–µ—Ç–æ–¥ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏*\\."
        raise ValueError(f"Invalid language: {self._language.value}")

    def enter_auth_data_prompt(self, auth_method: AuthMethod) -> str:
        """
        Returns the prompt for entering authentication data,
        specifying the expected format for headers or cookies.
        """
        example_header = "X\\-Auth\\-Token ASsdfjsdkfjskdfj"
        example_cookie = "sessionid=somevalue"

        if self._language == Languages.en:
            if auth_method == AuthMethod.HEADERS:
                return (
                    "Please enter the *header key and value* separated by a space\\.\n"
                    f"Example: `{example_header}`"
                )
            if auth_method == AuthMethod.COOKIES:
                return (
                    "Please enter the *cookie key and value* separated by an equals sign\\.\n"
                    f"Example: `{example_cookie}`" # Cookies typically use key=value
                )
            # Should not happen if AuthMethod.NONE is handled by UI not calling this.
            return "Please enter authentication data\\."

        if self._language == Languages.ru:
            if auth_method == AuthMethod.HEADERS:
                return (
                    "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ *–∫–ª—é—á –∏ –∑–Ω–∞—á–µ–Ω–∏–µ –∑–∞–≥–æ–ª–æ–≤–∫–∞*, —Ä–∞–∑–¥–µ–ª–µ–Ω–Ω—ã–µ –ø—Ä–æ–±–µ–ª–æ–º\\.\n"
                    f"–ü—Ä–∏–º–µ—Ä: `{example_header}`"
                )
            if auth_method == AuthMethod.COOKIES:
                return (
                    "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ *–∫–ª—é—á –∏ –∑–Ω–∞—á–µ–Ω–∏–µ –∫—É–∫–∏*, —Ä–∞–∑–¥–µ–ª–µ–Ω–Ω—ã–µ –∑–Ω–∞–∫–æ–º —Ä–∞–≤–µ–Ω—Å—Ç–≤–∞\\.\n"
                    f"–ü—Ä–∏–º–µ—Ä: `{example_cookie}`"
                )
            return "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏\\."

        raise ValueError(f"Invalid language: {self._language.value}")

    def confirm_ai_config_prompt(
            self,
            url: str,
            http_method: HTTPMethods,
            auth_method: AuthMethod,
            auth_data: str | None = None,  # Key-value pair Cookie/Header
    ) -> str:
        """
        Returns the confirmation message displaying all entered AI configuration details.
        """
        confirm_text_en = "Please confirm the following AI configuration\\:"
        confirm_text_ru = "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ —Å–ª–µ–¥—É—é—â—É—é –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é AI\\:"

        url_line_en = f"URL: `{url}`"
        url_line_ru = f"URL: `{url}`"

        method_line_en = f"HTTP Method: *{http_method.value}*"
        method_line_ru = f"HTTP –ú–µ—Ç–æ–¥: *{http_method.value}*"

        auth_method_line_en = f"Authentication: *{auth_method.value.capitalize()}*"
        auth_method_line_ru = f"–ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è: *{auth_method.value.capitalize()}*"

        auth_data_line_en = ""
        auth_data_line_ru = ""
        if auth_method != AuthMethod.NONE and auth_data:
            auth_data_line_en = f"Auth Data: `{auth_data}`"
            auth_data_line_ru = f"–î–∞–Ω–Ω—ã–µ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏: `{auth_data}`"

        if self._language == Languages.en:
            return (
                f"{confirm_text_en}\n"
                f"{url_line_en}\n"
                f"{method_line_en}\n"
                f"{auth_method_line_en}\n"
                f"{auth_data_line_en}\n"
                "\nIs this correct\\?"
            )
        if self._language == Languages.ru:
            return (
                f"{confirm_text_ru}\n"
                f"{url_line_ru}\n"
                f"{method_line_ru}\n"
                f"{auth_method_line_ru}\n"
                f"{auth_data_line_ru}\n"
                "\n–í–µ—Ä–Ω–æ\\?"
            )

        raise ValueError(f"Invalid language: {self._language.value}")



    def list_ai_models(self) -> str:
        if self._language == Languages.en:
            return "Here is your *list of AI models*\\."
        if self._language == Languages.ru:
            return "–í–æ—Ç –≤–∞—à *—Å–ø–∏—Å–æ–∫ –º–æ–¥–µ–ª–µ–π –ò–ò*\\."
        return "..."

    def delete_ai_prompt(self) -> str:
        if self._language == Languages.en:
            return "Please select the *AI to delete*\\."
        if self._language == Languages.ru:
            return "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ *–ò–ò –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è*\\."
        return "..."

    def invalid_url(self) -> str:
        if self._language == Languages.en:
            return "Invalid URL ‚ùå"
        if self._language == Languages.ru:
            return "–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞ ‚ùå"
        return "..."

    def invalid_auth_creds(self, auth_method: AuthMethod) -> str:
        if self._language == Languages.en:
            return f"Invalid credentials for {auth_method.value}\\."
        if self._language == Languages.ru:
            if auth_method == AuthMethod.HEADERS:
                return "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –ó–∞–≥–æ–ª–æ–≤–∫–∞\\."
            return "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –ö—É–∫–∏\\."
        return "..."
