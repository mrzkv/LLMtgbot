from aiogram.utils.markdown import link

from src.schemes.enums import Languages, Menu


class TextBuilder:
    """
    Class for building text messages for bot
    with different languages, using MarkdownV2.
     """

    def __init__(self, language: Languages) -> None:
        if not isinstance(language, Languages):
            raise TypeError("Language must be an instance of Languages Enum.")
        self._language = language

    @staticmethod
    def start_handler() -> str:
        return "üåê:"

    def main_menu_greeting(self) -> str:
        if self._language == Languages.en:
            return "You are in the *main menu*\\. Here's what you can do\\:"
        if self._language == Languages.ru:
            return "–í—ã –≤ *–≥–ª–∞–≤–Ω–æ–º –º–µ–Ω—é*\\. –í–æ—Ç —á—Ç–æ –≤—ã –º–æ–∂–µ—Ç–µ —Å–¥–µ–ª–∞—Ç—å\\:"
        raise ValueError(f"Invalid language: {self._language.value}")

    def main( # noqa: PLR0911
            self,
            item: Menu,
    ) -> str:
        if not isinstance(item, Menu):
            raise TypeError("Item must be an instance of Menu Enum.")

        if self._language == Languages.en:
            if item == Menu.info:
                return (
                    "Information about bot\\:\n\n"
                    f"Source code: {link('github.com/mrzkv/LLMtgbot', 'https://github.com/mrzkv/LLMtgbot')}\n"
                    f"Creator: {link('tg.mrzkv.ru', 'https://tg.mrzkv.ru')}\n\n"
                )
            if item == Menu.models:
                return "You are in the *Models menu* üß†"
            if item == Menu.settings:
                return "You are in the *Bot settings* ‚öôÔ∏è"
            return "Unknown menu item. Please select an option from the menu below."

        if self._language == Languages.ru:
            if item == Menu.info:
                return (
                    "–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –±–æ—Ç–µ\\:\n\n" # noqa: RUF001
                    f"–ò—Å—Ö–æ–¥–Ω—ã–π –∫–æ–¥: {link('github.com/mrzkv/LLMtgbot', 'https://github.com/mrzkv/LLMtgbot')}\n"
                    f"–°–æ–∑–¥–∞—Ç–µ–ª—å: {link('tg.mrzkv.ru', 'https://tg.mrzkv.ru')}\n\n"
                )
            if item == Menu.models:
                return "–í—ã –≤ *–º–µ–Ω—é –º–æ–¥–µ–ª–µ–π* üß†"
            if item == Menu.settings:
                return "–í—ã –≤ *–Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö –±–æ—Ç–∞* ‚öôÔ∏è"
            return "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –ø—É–Ω–∫—Ç –º–µ–Ω—é\\. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –æ–ø—Ü–∏—é –∏–∑ –º–µ–Ω—é –Ω–∏–∂–µ\\."

        raise ValueError(f"Invalid language: {self._language.value}")

    def add_ai_prompt(self) -> str:
        if self._language == Languages.en:
            return "Please enter the *details for adding AI*\\."
        if self._language == Languages.ru:
            return "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ *–¥–∞–Ω–Ω—ã–µ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ò–ò*\\."
        return "..."

    def list_ai_models(self) -> str:
        if self._language == Languages.en:
            return "Here is your *list of AI models*\\."
        if self._language == Languages.ru:
            return "–í–æ—Ç –≤–∞—à *—Å–ø–∏—Å–æ–∫ –º–æ–¥–µ–ª–µ–π –ò–ò*\\."
        return "..."

    def delete_ai_prompt(self) -> str:
        if self._language == Languages.en:
            return "Please select the *AI to delete*\\."
        if self._language == Languages.ru:
            return "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ *–ò–ò –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è*\\."
        return "..."
